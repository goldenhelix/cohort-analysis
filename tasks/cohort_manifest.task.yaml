name: Cohort Manifest Generator
description: |-
  Creates a manifest file listing all VCF.gz files from an input directory.

  This task generates a manifest file that lists all VCF.gz files in a specified
  directory. The manifest file is used to specify the input files for downstream
  tasks that require a list of VCF files.

  ## Important Note
  This task should not be run directly. Instead:
  1. Use the "Build Cohort Annotation Track" workflow
  2. Select your existing cohort parameter file
  3. Select the folder containing your new VCF files
  
  The workflow will automatically run this task as part of the cohort workflow.

agent_requirements:
  cpu_cores: 0
  memory_gb: 0

parameters:
  - name: input_directory
    type: directory
    label: Input Directory
    help: Directory containing VCF.gz files to process
    supports_location_mode: 'read_only'

steps:
  - name: create_manifest
    description: Create manifest file listing all VCF.gz files
    type: cmd
    command: bash
    args:
      - |-
        #!/usr/bin/env bash
        set -ex

        # Ensure output directory exists
        output_directory="$(pwd)"

        ls -la ../.
        ls -la .

        mkdir -p "${output_directory}"
        manifest_file="${output_directory}/manifest.txt"

        # Create manifest file with absolute paths
        find "${input_directory}" -type f -name "*.vcf.gz" | sort > "${manifest_file}"

        echo "Created manifest file at ${manifest_file}"
        echo "Found $(wc -l < "${manifest_file}") VCF files" 

        # Seem to need this to prevent I/O errors on windows ???, otherwise we
        # can't write the result.env file
        echo "Working directory: $(pwd)/.., contains $(ls -la ../.)"


        manifest_file="${output_directory}/manifest.txt"
        manifest_file="$(readlink -f "${manifest_file}")"
        manifest_file="${manifest_file#${WORKSPACE_DIR}/}"

        touch result.env
        echo "manifest_file=${manifest_file}" 
        echo "manifest_file=${manifest_file}" > result.env
